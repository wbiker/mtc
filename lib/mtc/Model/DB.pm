package mtc::Model::DB;

use strict;
use base 'Catalyst::Model::DBIC::Schema';

use Data::Dumper;

__PACKAGE__->config(
    schema_class => 'mtc::Schema',
    
    connect_info => {
        dsn => 'dbi:SQLite:root/database',
        user => '',
        password => '',
    }
);

sub get_customer_for_select {
    my ($self) = @_;
    
    my $customer = $self->resultset('Customer');
    my $value_label = [];    
    if($customer->count > 0) {
        while(my $row = $customer->next) {
            my $name = $row->firstname." ".$row->lastname;
            push(@{$value_label}, { value => $row->cid, label => $name });
        }
    }
    return $value_label;
}

sub get_categories {
    my ($self) = @_;

    my $categories = $self->resultset('Category');
    my $cats = [];
    if($categories->count > 0) {
        while(my $row = $categories->next) {
            push(@{$cats}, { value => $row->cid, label => $row->name });
        }
    }

    return $cats;
}

sub get_exercises_for_planid {
    my ($self, $c, $planid) = @_;
    
    my $exercisesIDs = $self->resultset('Trainingsplanexercise')->search({tid => $planid });

    my @ids;
    my $dum;
    if($exercisesIDs->count > 0) {
        while(my $row = $exercisesIDs->next) {
            $c->log->debug("Exercise id: ".$row->get_column('eid'));

            push(@ids, $row->get_column('eid'));
        }
    }

    return $self->resultset('Exercise')->search({ eid => [@ids] });
}

=head1 NAME

mtc::Model::DB - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<mtc>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<mtc::Schema>

=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.61

=head1 AUTHOR

A clever guy

=head1 LICENSE

This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
